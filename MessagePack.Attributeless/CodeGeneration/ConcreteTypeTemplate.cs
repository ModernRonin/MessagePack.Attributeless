// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace MessagePack.Attributeless.CodeGeneration
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\ConcreteTypeTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class ConcreteTypeTemplate : AFormatterTemplate
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("namespace ");
            
            #line 6 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\ConcreteTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write(" \r\n{\r\n\tusing MessagePack;\r\n\tusing MessagePack.Formatters;\r\n\tusing MessagePack.Res" +
                    "olvers;\r\n\r\n\tpublic class ");
            
            #line 12 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\ConcreteTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(IdentifierTypeName));
            
            #line default
            #line hidden
            this.Write("Formatter: IMessagePackFormatter<");
            
            #line 12 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\ConcreteTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FullTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n\t{\r\n\t\tpublic ");
            
            #line 14 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\ConcreteTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FullTypeName));
            
            #line default
            #line hidden
            this.Write(" Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)\r" +
                    "\n\t\t{\r\n\t\t\tif (reader.TryReadNil()) return default;\r\n\r\n\t\t\treturn new ");
            
            #line 18 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\ConcreteTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FullTypeName));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t{\r\n\t\t\t\t");
            
            #line 20 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\ConcreteTypeTemplate.tt"
 foreach (var (name, type) in Mappings) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 21 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\ConcreteTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(" = options.Resolver.GetFormatterWithVerify<");
            
            #line 21 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\ConcreteTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            
            #line default
            #line hidden
            this.Write(">().Deserialize(ref reader, options),\r\n\t\t\t\t");
            
            #line 22 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\ConcreteTypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t};\r\n\t\t}\r\n\t\tpublic void Serialize(ref MessagePackWriter writer, ");
            
            #line 25 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\ConcreteTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FullTypeName));
            
            #line default
            #line hidden
            this.Write(" value, MessagePackSerializerOptions options) \r\n\t\t{ \r\n\t\t\tif (value == null)\r\n\t\t\t{" +
                    "\r\n\t\t\t\twriter.WriteNil();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t");
            
            #line 33 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\ConcreteTypeTemplate.tt"
 foreach (var (name, type) in Mappings) { 
            
            #line default
            #line hidden
            this.Write("\t\t\toptions.Resolver.GetFormatterWithVerify<");
            
            #line 34 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\ConcreteTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            
            #line default
            #line hidden
            this.Write(">().Serialize(ref writer, value.");
            
            #line 34 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\ConcreteTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(", options);\r\n\t\t\t");
            
            #line 35 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\ConcreteTypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\t}\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
