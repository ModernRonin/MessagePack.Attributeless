<#@ template language="C#" inherits="AFormatterTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

namespace <#= Namespace #> 
{
	using MessagePack;
	using MessagePack.Formatters;
	using MessagePack.Resolvers;

	public class <#= IdentifierTypeName #>Formatter: IMessagePackFormatter<<#= FullTypeName #>>
	{
		
		public <#= FullTypeName #> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
		{
			if (reader.TryReadNil()) return default;

			var key = reader.ReadInt32();
			switch (key)
			{			
				<#
					foreach (var kvp in Mappings)
					{
				#>

				case <#= kvp.Value #>: return options.Resolver.GetFormatterWithVerify<<#= kvp.Key #>>().Deserialize(ref reader, options);
				
				<#
					}
				#>

			}
			throw new MessagePackSerializationException(
					$"Encountered unknown type key {key} for <#= FullTypeName #> - was this serialized with a different configuration?");
		}
		public void Serialize(ref MessagePackWriter writer, <#= FullTypeName #> value, MessagePackSerializerOptions options) 
		{ 
			if (value == null)
			{
				writer.WriteNil();
				return;
			}

			switch (value)
			{			
				<#
					foreach (var kvp in Mappings)
					{
				#>

				case <#= kvp.Key #> t: 
				writer.Write(<#= kvp.Value #>);
				options.Resolver.GetFormatterWithVerify<<#= kvp.Key #>>().Serialize(ref writer, t, options);
					return;
				
				<#
					}
				#>

			}
			throw new MessagePackSerializationException($"Missing configuration for subtype {value.GetType().Name} of <#= FullTypeName #>");
		}
	}
}
