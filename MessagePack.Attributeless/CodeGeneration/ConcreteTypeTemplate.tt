<#@ template language="C#" inherits="AFormatterTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
namespace <#= Namespace #> 
{
	using MessagePack;
	using MessagePack.Formatters;
	using MessagePack.Resolvers;

	public class <#= IdentifierTypeName #>Formatter: IMessagePackFormatter<<#= FullTypeName #>>
	{
		public <#= FullTypeName #> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
		{
			if (reader.TryReadNil()) return default;

			return new <#= FullTypeName #>
			{
				<# foreach (var (name, type) in Mappings) { #>
				<#= name #> = options.Resolver.GetFormatterWithVerify<<#= type #>>().Deserialize(ref reader, options),
				<# } #>
			};
		}
		public void Serialize(ref MessagePackWriter writer, <#= FullTypeName #> value, MessagePackSerializerOptions options) 
		{ 
			if (value == null)
			{
				writer.WriteNil();
				return;
			}

			<# foreach (var (name, type) in Mappings) { #>
			options.Resolver.GetFormatterWithVerify<<#= type #>>().Serialize(ref writer, value.<#= name #>, options);
			<# } #>
		}
	}
}