// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace MessagePack.Attributeless.CodeGeneration
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\BaseTypeTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class BaseTypeTemplate : AFormatterTemplate
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\r\nnamespace ");
            
            #line 7 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\BaseTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write(" \r\n{\r\n\tusing MessagePack.Formatters;\r\n\r\n\tpublic class ");
            
            #line 11 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\BaseTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(IdentifierTypeName));
            
            #line default
            #line hidden
            this.Write("Formatter: IMessagePackFormatter<");
            
            #line 11 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\BaseTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FullTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n\t{\r\n\t\t\r\n\t\tpublic ");
            
            #line 14 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\BaseTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FullTypeName));
            
            #line default
            #line hidden
            this.Write(" Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)\r" +
                    "\n\t\t{\r\n\t\t\tif (reader.TryReadNil()) return default;\r\n\r\n\t\t\tvar key = reader.ReadInt" +
                    "32();\r\n\t\t\tswitch (key)\r\n\t\t\t{\t\t\t\r\n\t\t\t\t");
            
            #line 21 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\BaseTypeTemplate.tt"

					foreach (var kvp in Mappings)
					{
				
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\tcase ");
            
            #line 26 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\BaseTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Value));
            
            #line default
            #line hidden
            this.Write(": return deserialize<");
            
            #line 26 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\BaseTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Key));
            
            #line default
            #line hidden
            this.Write(">();\r\n\t\t\t\t\r\n\t\t\t\t");
            
            #line 28 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\BaseTypeTemplate.tt"

					}
				
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t}\r\n\t\t\tthrow new MessagePackSerializationException(\r\n\t\t\t\t\t$\"Encountered unkno" +
                    "wn type key {key} for ");
            
            #line 34 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\BaseTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FullTypeName));
            
            #line default
            #line hidden
            this.Write(" - was this serialized with a different configuration?\");\r\n\t\t\t\r\n\t\t\tT deserialize<" +
                    "T>() where T: ");
            
            #line 36 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\BaseTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FullTypeName));
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t\t\t=> return options.Resolver.GetFormatterWithVerify<T>().Deserialize(ref rea" +
                    "der, options);\r\n\t\t}\r\n\t\tpublic void Serialize(ref MessagePackWriter writer, ");
            
            #line 39 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\BaseTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FullTypeName));
            
            #line default
            #line hidden
            this.Write(" value, MessagePackSerializerOptions options) \r\n\t\t{ \r\n\t\t\tif (value == null)\r\n\t\t\t{" +
                    "\r\n\t\t\t\twriter.WriteNil();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (value)\r\n\t\t\t{\t\t\t\r\n\t\t\t\t");
            
            #line 49 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\BaseTypeTemplate.tt"

					foreach (var kvp in Mappings)
					{
				
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\tcase ");
            
            #line 54 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\BaseTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Key));
            
            #line default
            #line hidden
            this.Write(" t: serialize(t, ");
            
            #line 54 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\BaseTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Value));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t\t\r\n\t\t\t\t");
            
            #line 56 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\BaseTypeTemplate.tt"

					}
				
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t}\r\n\t\t\tthrow new MessagePackSerializationException($\"Missing configuration fo" +
                    "r subtype {value.GetType().Name} of ");
            
            #line 61 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\BaseTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FullTypeName));
            
            #line default
            #line hidden
            this.Write("\");\r\n\t\t\t\r\n\t\t\tvoid serialize<T>(T what, int key) where T: ");
            
            #line 63 "C:\Projects\Github\MessagePackExtras\MessagePack.Attributeless\CodeGeneration\BaseTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FullTypeName));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t{\r\n\t\t\t\twriter.Write(key);\r\n\t\t\t\toptions.Resolver.GetFormatterWithVerify<T>()." +
                    "Serialize(ref writer, what, options);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
