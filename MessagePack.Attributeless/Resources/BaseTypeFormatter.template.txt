public class {{IdentifierTypeName}}Formatter: IMessagePackFormatter<{{FullTypeName}}>
{
		
	public {{FullTypeName}} Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
	{
		if (reader.TryReadNil()) return default;

		var key = reader.ReadInt32();
		switch (key)
		{			
			{% for subType in SubTypes -%}
			case {{subType.Key}}: return options.Resolver.GetFormatterWithVerify<{{subType.Type}}>().Deserialize(ref reader, options);
			{% endfor -%}				
		}
		throw new MessagePackSerializationException(
				$"Encountered unknown type key {key} for {{FullTypeName}} - was this serialized with a different configuration?");
	}
	public void Serialize(ref MessagePackWriter writer, {{FullTypeName}} value, MessagePackSerializerOptions options) 
	{ 
		if (value == null)
		{
			writer.WriteNil();
			return;
		}

		switch (value)
		{			
			{% for subType in SubTypes -%}
			case {{subType.Type}} t: 
				writer.Write({{subType.Key}});
				options.Resolver.GetFormatterWithVerify<{{subType.Type}}>().Serialize(ref writer, t, options);
					return;
			{% endfor -%}				
		}
		throw new MessagePackSerializationException($"Missing configuration for subtype {value.GetType().Name} of {{FullTypeName}}");
	}
}
