namespace Generated 
{
	using MessagePack.Formatters;

	public class SideFormatter: IMessagePackFormatter<MessagePack.Attributeless.Tests.Samples.Side>
	{
		public MessagePack.Attributeless.Tests.Samples.Side Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
		{
			return (MessagePack.Attributeless.Tests.Samples.Side) reader.ReadInt32((int) value)()
		}
		public void Serialize(ref MessagePackWriter writer, MessagePack.Attributeless.Tests.Samples.Side value, MessagePackSerializerOptions options) 
		{ 
			writer.WriteInt32(value);
		}
	}
}
namespace Generated 
{
	using MessagePack.Formatters;

	public class IExtremityFormatter: IMessagePackFormatter<MessagePack.Attributeless.Tests.Samples.IExtremity>
	{
		
		public MessagePack.Attributeless.Tests.Samples.IExtremity Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
		{
			if (reader.TryReadNil()) return default;

			var key = reader.ReadInt32();
			switch (key)
			{			
				
				case 0: return deserialize<MessagePack.Attributeless.Tests.Samples.Arm>();
				
				
				case 1: return deserialize<MessagePack.Attributeless.Tests.Samples.Leg>();
				
				
				case 2: return deserialize<MessagePack.Attributeless.Tests.Samples.Wing>();
				
				
			}
			throw new MessagePackSerializationException(
                    $"Encountered unknown type key {key} for MessagePack.Attributeless.Tests.Samples.IExtremity - was this serialized with a different configuration?");
			
			T deserialize<T>() where T: MessagePack.Attributeless.Tests.Samples.IExtremity 
            	=> return options.Resolver.GetFormatterWithVerify<T>().Deserialize(ref reader, options);
		}
		public void Serialize(ref MessagePackWriter writer, MessagePack.Attributeless.Tests.Samples.IExtremity value, MessagePackSerializerOptions options) 
		{ 
			if (value == null)
            {
                writer.WriteNil();
                return;
            }

		}
	}
}
