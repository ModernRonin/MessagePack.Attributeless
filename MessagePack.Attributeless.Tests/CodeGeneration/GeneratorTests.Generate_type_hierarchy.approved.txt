
namespace Generated 
{
	using MessagePack;
	using MessagePack.Formatters;
	using MessagePack.Resolvers;

	public static class MessagePackSerializerOptionsExtensions
	{
		public static MessagePackSerializerOptions Add(this MessagePackSerializerOptions self)
			=> self.WithResolver(CompositeResolver.Create(new IMessagePackFormatter[]
			{
								new ArmFormatter(),
								new SideFormatter(),
								new LegFormatter(),
								new WingFormatter(),
								new IExtremityFormatter(),
							}, new[] { self.Resolver }));
	}
}namespace Generated 
{
	using MessagePack;
	using MessagePack.Formatters;
	using MessagePack.Resolvers;

	public class SideFormatter: IMessagePackFormatter<MessagePack.Attributeless.Tests.Samples.Side>
	{
		public MessagePack.Attributeless.Tests.Samples.Side Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
		{
			return (MessagePack.Attributeless.Tests.Samples.Side) reader.ReadInt32();
		}
		public void Serialize(ref MessagePackWriter writer, MessagePack.Attributeless.Tests.Samples.Side value, MessagePackSerializerOptions options) 
		{ 
			writer.WriteInt32((int) value);
		}
	}
}
namespace Generated 
{
	using MessagePack;
	using MessagePack.Formatters;
	using MessagePack.Resolvers;

	public class IExtremityFormatter: IMessagePackFormatter<MessagePack.Attributeless.Tests.Samples.IExtremity>
	{
		
		public MessagePack.Attributeless.Tests.Samples.IExtremity Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
		{
			if (reader.TryReadNil()) return default;

			var key = reader.ReadInt32();
			switch (key)
			{			
				
				case 0: return options.Resolver.GetFormatterWithVerify<MessagePack.Attributeless.Tests.Samples.Arm>().Deserialize(ref reader, options);
				
				
				case 1: return options.Resolver.GetFormatterWithVerify<MessagePack.Attributeless.Tests.Samples.Leg>().Deserialize(ref reader, options);
				
				
				case 2: return options.Resolver.GetFormatterWithVerify<MessagePack.Attributeless.Tests.Samples.Wing>().Deserialize(ref reader, options);
				
				
			}
			throw new MessagePackSerializationException(
					$"Encountered unknown type key {key} for MessagePack.Attributeless.Tests.Samples.IExtremity - was this serialized with a different configuration?");
		}
		public void Serialize(ref MessagePackWriter writer, MessagePack.Attributeless.Tests.Samples.IExtremity value, MessagePackSerializerOptions options) 
		{ 
			if (value == null)
			{
				writer.WriteNil();
				return;
			}

			switch (value)
			{			
				
				case MessagePack.Attributeless.Tests.Samples.Arm t: 
				writer.Write(0);
				options.Resolver.GetFormatterWithVerify<MessagePack.Attributeless.Tests.Samples.Arm>().Serialize(ref writer, t, options);
					return;
				
				
				case MessagePack.Attributeless.Tests.Samples.Leg t: 
				writer.Write(1);
				options.Resolver.GetFormatterWithVerify<MessagePack.Attributeless.Tests.Samples.Leg>().Serialize(ref writer, t, options);
					return;
				
				
				case MessagePack.Attributeless.Tests.Samples.Wing t: 
				writer.Write(2);
				options.Resolver.GetFormatterWithVerify<MessagePack.Attributeless.Tests.Samples.Wing>().Serialize(ref writer, t, options);
					return;
				
				
			}
			throw new MessagePackSerializationException($"Missing configuration for subtype {value.GetType().Name} of MessagePack.Attributeless.Tests.Samples.IExtremity");
		}
	}
}
namespace Generated 
{
	using MessagePack;
	using MessagePack.Formatters;
	using MessagePack.Resolvers;

	public class ArmFormatter: IMessagePackFormatter<MessagePack.Attributeless.Tests.Samples.Arm>
	{
		public MessagePack.Attributeless.Tests.Samples.Arm Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
		{
			if (reader.TryReadNil()) return default;

			return new MessagePack.Attributeless.Tests.Samples.Arm
			{
								NumberOfFingers = options.Resolver.GetFormatterWithVerify<System.Byte>().Deserialize(ref reader, options),
								Side = options.Resolver.GetFormatterWithVerify<MessagePack.Attributeless.Tests.Samples.Side>().Deserialize(ref reader, options),
							};
		}
		public void Serialize(ref MessagePackWriter writer, MessagePack.Attributeless.Tests.Samples.Arm value, MessagePackSerializerOptions options) 
		{ 
			if (value == null)
			{
				writer.WriteNil();
				return;
			}

						options.Resolver.GetFormatterWithVerify<System.Byte>().Serialize(ref writer, value.NumberOfFingers, options);
						options.Resolver.GetFormatterWithVerify<MessagePack.Attributeless.Tests.Samples.Side>().Serialize(ref writer, value.Side, options);
					}
	}
}namespace Generated 
{
	using MessagePack;
	using MessagePack.Formatters;
	using MessagePack.Resolvers;

	public class LegFormatter: IMessagePackFormatter<MessagePack.Attributeless.Tests.Samples.Leg>
	{
		public MessagePack.Attributeless.Tests.Samples.Leg Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
		{
			if (reader.TryReadNil()) return default;

			return new MessagePack.Attributeless.Tests.Samples.Leg
			{
								NumberOfToes = options.Resolver.GetFormatterWithVerify<System.Byte>().Deserialize(ref reader, options),
								Side = options.Resolver.GetFormatterWithVerify<MessagePack.Attributeless.Tests.Samples.Side>().Deserialize(ref reader, options),
							};
		}
		public void Serialize(ref MessagePackWriter writer, MessagePack.Attributeless.Tests.Samples.Leg value, MessagePackSerializerOptions options) 
		{ 
			if (value == null)
			{
				writer.WriteNil();
				return;
			}

						options.Resolver.GetFormatterWithVerify<System.Byte>().Serialize(ref writer, value.NumberOfToes, options);
						options.Resolver.GetFormatterWithVerify<MessagePack.Attributeless.Tests.Samples.Side>().Serialize(ref writer, value.Side, options);
					}
	}
}namespace Generated 
{
	using MessagePack;
	using MessagePack.Formatters;
	using MessagePack.Resolvers;

	public class WingFormatter: IMessagePackFormatter<MessagePack.Attributeless.Tests.Samples.Wing>
	{
		public MessagePack.Attributeless.Tests.Samples.Wing Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
		{
			if (reader.TryReadNil()) return default;

			return new MessagePack.Attributeless.Tests.Samples.Wing
			{
								Side = options.Resolver.GetFormatterWithVerify<MessagePack.Attributeless.Tests.Samples.Side>().Deserialize(ref reader, options),
								Span = options.Resolver.GetFormatterWithVerify<System.Int32>().Deserialize(ref reader, options),
							};
		}
		public void Serialize(ref MessagePackWriter writer, MessagePack.Attributeless.Tests.Samples.Wing value, MessagePackSerializerOptions options) 
		{ 
			if (value == null)
			{
				writer.WriteNil();
				return;
			}

						options.Resolver.GetFormatterWithVerify<MessagePack.Attributeless.Tests.Samples.Side>().Serialize(ref writer, value.Side, options);
						options.Resolver.GetFormatterWithVerify<System.Int32>().Serialize(ref writer, value.Span, options);
					}
	}
}